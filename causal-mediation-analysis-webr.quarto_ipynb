{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: A Tutorial on Conducting Mediation Analysis with Exposure Mixtures\n",
        "filters:\n",
        "  - webr\n",
        "---\n",
        "\n",
        "\n",
        "## Load libraries required for this document\n",
        "\n",
        "```{webr-r}\n",
        "library(tidyverse)\n",
        "# library(bkmr) bkmr is not available on webR\n",
        "# library(CMAverse) CMAverse is not available on webR\n",
        "\n",
        "# Can compile unavailable R packages to an R WASM Package binary and setup a custom repository to share it (r-universe.dev)\n",
        "```\n",
        "\n",
        "\n",
        "## Example: Simulation Data\n",
        "\n",
        "### Setup code\n",
        "\n",
        "```{webr-r}\n",
        "p <- 1; q <- 30; s <- 6\n",
        "\n",
        "# Indirect effects\n",
        "Alpha_a <- matrix(0, nrow = 1, ncol = q)\n",
        "Alpha_a[c(1, 11, 21)] <- 1 # weak effect\n",
        "Alpha_a[c(2, 12, 22)] <- 4 # moderate effect\n",
        "Alpha_a[c(3, 13, 23)] <- 8 # strong effect\n",
        "\n",
        "Beta_m <- 0.5\n",
        "\n",
        "# Direct effects\n",
        "Beta_a <- rep(c(5, 0, 0), times = q/3) %>% as.matrix()\n",
        "\n",
        "# Confounder effects\n",
        "Theta_c <- matrix(rep(0.1, times = q*(s-1)), nrow = q)\n",
        "Alpha_c <- matrix(1, nrow = p, ncol = s)\n",
        "Beta_c <- matrix(1, nrow = s, ncol = 1)\n",
        "```\n",
        "\n",
        "\n",
        "### Data Generation\n",
        "\n",
        "```{webr-r}\n",
        "# Function that generates data\n",
        "data_gen <- function(n_obs, n_expo, n_confound,\n",
        "                     expo_blockNum, expo_blockCorr,\n",
        "                     confound_blockNum, confound_blockCorr,\n",
        "                     Alpha_a, Alpha_c, Beta_m, Beta_a, Beta_c,\n",
        "                     Theta_c, # theta_c is what confounders contributes to exposures (q times s dim)\n",
        "                     adjR2_M, adjR2_Y){\n",
        "  n_obs <- n_obs\n",
        "  q <- n_expo\n",
        "  p <- 1 # we assume 1 mediator for now\n",
        "  # We assume no confounders\n",
        "  s <- n_confound + 1 # if s == 1 then it is just the intercept\n",
        "  \n",
        "  # Geenrate intercept and confounders\n",
        "  if(s == 1){\n",
        "    C_i_T <- rep(1, n_obs) %>% as.matrix() \n",
        "    Sigma_C <- diag(s)\n",
        "  } else{\n",
        "    interCept <- rep(1, n_obs) %>% as.matrix() \n",
        "    \n",
        "    Sigma_C <- gen_block_corr(exposure_numbers = confound_blockNum,\n",
        "                              correlations = confound_blockCorr)\n",
        "    \n",
        "    conFound <- MASS::mvrnorm(n = n_obs, mu = rep(0, s-1), Sigma = Sigma_C) # s is the number of confounders\n",
        "    C_i_T <- cbind(interCept, conFound)\n",
        "  }\n",
        "  \n",
        "  ## Exposures\n",
        "  Sigma_X <- gen_block_corr(exposure_numbers = expo_blockNum,\n",
        "                            correlations = expo_blockCorr)\n",
        "  \n",
        "  # generate the exposures\n",
        "  X <- t(Theta_c %*% t(conFound)) + MASS::mvrnorm(n = n_obs, mu = rep(0, q), Sigma = Sigma_X) #  MASS::mvrnorm(n = n_obs, mu = rep(0, q), Sigma = Sigma_X)\n",
        "  colnames(X) <- paste0(\"x\", 1: q)\n",
        "  \n",
        "  # we can calculate the Sigma_M (a scalar here)\n",
        "  adjR2_M <- adjR2_M\n",
        "  r2_M <- 1 - ((n_obs - q - s - 1)/(n_obs - 1))*(1 - adjR2_M) # set adjusted r-squared to 0.3\n",
        "  \n",
        "  \n",
        "  # some prep\n",
        "  big_alpha <- cbind(Alpha_a, Alpha_c)\n",
        "  colnames(big_alpha) <- NULL\n",
        "  \n",
        "  V_mat_alpha <- matrix(0, nrow = (q+s), ncol = (q+s))\n",
        "  V_mat_alpha[1:q, 1:q] <- var(X)\n",
        "  V_mat_alpha[(q+1):(q+s), (q+1):(q+s)] <- var(C_i_T)\n",
        "  \n",
        "  \n",
        "  Sigma_M <- ((1-r2_M)/(r2_M))*big_alpha %*% V_mat_alpha %*% t(big_alpha)\n",
        "  \n",
        "  # Generate M Mediators\n",
        "  M <- t(Alpha_a %*% t(X) + Alpha_c %*% t(C_i_T)) + MASS::mvrnorm(n = n_obs, mu = 0, Sigma = Sigma_M) # mu + error\n",
        "  \n",
        "  #Generate sigma^2_e (error variance of the outcome model)\n",
        "  # big_beta\n",
        "  big_bt <- cbind(Beta_m, t(Beta_a), t(Beta_c))\n",
        "  colnames(big_bt) <- NULL\n",
        "  \n",
        "  # build the V = var covar of M, X\n",
        "  V_mat <- matrix(0, nrow = (p+q+s), ncol = (p+q+s))\n",
        "  V_mat[1:p, 1:p] <- var(M)\n",
        "  V_mat[(p+1):(p+q), (p+1):(p+q)] <- var(X) \n",
        "  V_mat[(p+q+1):(p+q+s), (p+q+1):(p+q+s)] <- var(C_i_T) \n",
        "  \n",
        "  \n",
        "  # Calculate the sigma_y\n",
        "  adjR2_Y <- adjR2_Y\n",
        "  r2_Y <- 1 - ((n_obs - p - q - s - 1)/(n_obs - 1))*(1 - adjR2_Y) # set adjusted r-squared to 0.3\n",
        "  \n",
        "  # calculate the optimal sigma^2_e for the two cases\n",
        "  Sigma_Y <- ((1-r2_Y)/(r2_Y))*big_bt %*% V_mat %*% t(big_bt)\n",
        "  \n",
        "  #Generate Y\n",
        "  comb_predictors <- cbind(M, X, C_i_T)\n",
        "  colnames(comb_predictors)[seq(p)] <- paste(\"m\", seq(p))\n",
        "  colnames(comb_predictors)[p + seq(q)] <- paste(\"x\", seq(q))\n",
        "  colnames(comb_predictors)[p + q + seq(s)] <- paste(c(\"intercept\", paste(\"c\", seq(s-1))))\n",
        "  \n",
        "  # if there are more than one confounders\n",
        "  #ifelse(s > 1,   colnames(comb_predictors)[p + q + 1 + seq(s)] <- paste(\"c\", seq(s-1)), \n",
        "  #      0)\n",
        "  \n",
        "  y1 <- t(big_bt %*% t(comb_predictors)) + MASS::mvrnorm(n = n_obs, mu = 0, Sigma = Sigma_Y) # mu + error\n",
        "  \n",
        "  #Combine the results\n",
        "  df_gen <- cbind(y1, M, X, C_i_T) %>% as.data.frame() #%>% dplyr::rename(y = V1, m1 = V2, intercept = V33)\n",
        "  \n",
        "  colnames(df_gen) <- c(\"y\", paste0(\"m\", seq(p)), paste0(\"x\", seq(q)), \"intercept\", paste0(\"c\", seq(s-1)))\n",
        "  \n",
        "  return(df_gen)\n",
        "}\n",
        "\n",
        "gen_block_corr <- function(exposure_numbers, correlations) {\n",
        "  if (length(exposure_numbers) != length(correlations)) {\n",
        "    stop(\"The lengths of exposure_numbers and correlations must match.\")\n",
        "  }\n",
        "  \n",
        "  # Load the Matrix library for bdiag\n",
        "  if (!requireNamespace(\"Matrix\", quietly = TRUE)) {\n",
        "    stop(\"The Matrix package is required. Please install it using install.packages('Matrix')\")\n",
        "  }\n",
        "  \n",
        "  # Function to create a single correlation block\n",
        "  create_correlation_block <- function(size, correlation) {\n",
        "    block <- matrix(correlation, nrow = size, ncol = size)\n",
        "    diag(block) <- 1 # Set diagonal elements to 1\n",
        "    return(block)\n",
        "  }\n",
        "  \n",
        "  # Create each correlation block and store them in a list\n",
        "  blocks <- lapply(seq_along(exposure_numbers), function(i) {\n",
        "    create_correlation_block(exposure_numbers[i], correlations[i])\n",
        "  })\n",
        "  \n",
        "  # Combine the blocks into a block diagonal matrix\n",
        "  correlation_matrix <- Matrix::bdiag(blocks)\n",
        "  \n",
        "  # Convert to a regular matrix for compatibility\n",
        "  correlation_matrix <- as.matrix(correlation_matrix)\n",
        "  \n",
        "  return(correlation_matrix)\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "### Run simulation\n",
        "\n",
        "```{webr-r}\n",
        "set.seed(1211)\n",
        "df_sim <- data_gen(n_obs = 2000, n_expo = 30, n_confound = 5,\n",
        "                   expo_blockNum =  c(5, 10, 15),\n",
        "                   expo_blockCorr = c(0.4, 0.8, 0.1),\n",
        "                   confound_blockNum = 5, confound_blockCorr = 0.2,\n",
        "                   Alpha_a = Alpha_a, Alpha_c = Alpha_c, \n",
        "                   Beta_m = Beta_m, Beta_a = Beta_a,\n",
        "                   Beta_c = Beta_c, Theta_c = Theta_c,\n",
        "                   adjR2_M = 0.3, adjR2_Y = 0.3)\n",
        "```\n",
        "\n",
        "\n",
        "## Individual exposure testing (without co-exposure)\n",
        "\n",
        "### Setup code\n",
        "```{webr-r}\n",
        "set.seed(1211)\n",
        "\n",
        "expo_nm <- df_sim %>%\n",
        "  select(starts_with(\"x\")) %>%\n",
        "  colnames()\n",
        "\n",
        "confounders_nm <- df_sim %>%\n",
        "  select(starts_with(\"c\")) %>%\n",
        "  colnames()\n",
        "\n",
        "mediator_nm <- df_sim %>%\n",
        "  select(starts_with(\"m\")) %>%\n",
        "  colnames()\n",
        "\n",
        "outcome_nm <- \"y\"\n",
        "```\n",
        "\n",
        "### Define IndExpo_medTest_NV()\n",
        "```{webr-r}\n",
        "IndExpo_medTest_NV <- function(data, nboot = 1000,\n",
        "                               exposures_nm, confounders_nm,\n",
        "                               mediator_nm, outcome_nm) {\n",
        "  suppressMessages(invisible(lapply(c(\"CMAverse\", \"purrr\", \"rlang\"), require, character.only = T)))\n",
        "  \n",
        "  # extract the list of exposures\n",
        "  Expo_names <- exposures_nm\n",
        "  \n",
        "  if (length(Expo_names) == 0) {\n",
        "    stop(\"There are no columns with names in Expo_names\")\n",
        "  }\n",
        "  \n",
        "  # a list to store the results\n",
        "  medTest_res <- list()\n",
        "  \n",
        "  # a function for purrr::map()\n",
        "  run_cmest <- function(Expo_id, data, nboot,\n",
        "                        confounders_nm = confounders_nm,\n",
        "                        mediator_nm = mediator_nm,\n",
        "                        outcome_nm = outcome_nm) {\n",
        "    if (length(confounders_nm) == 0) {\n",
        "      y_formula <- as.formula(paste0(outcome_nm, \" ~ \", Expo_id, \" + \", mediator_nm))\n",
        "      m_formula <- as.formula(paste0(mediator_nm, \" ~ \", Expo_id))\n",
        "      \n",
        "      # Evaluate the formulas in the correct environment\n",
        "      y_model <- eval(bquote(glm(.(y_formula), family = gaussian, data = data)))\n",
        "      m_model <- eval(bquote(glm(.(m_formula), family = gaussian, data = data)))\n",
        "      \n",
        "      # the CMA mediation effect testing\n",
        "      suppressWarnings(cma_test <- CMAverse::cmest(\n",
        "        data = data, model = \"rb\",\n",
        "        full = T, EMint = F,\n",
        "        yreg = y_model,\n",
        "        mreg = list(m_model),\n",
        "        mval = list(0),\n",
        "        outcome = outcome_nm, exposure = Expo_id, mediator = mediator_nm,\n",
        "        inference = \"bootstrap\", nboot = nboot, boot.ci.type = \"per\"\n",
        "      ))\n",
        "    } else {\n",
        "      y_formula <- as.formula(paste0(\n",
        "        outcome_nm, \" ~ \", Expo_id, \" + \", mediator_nm,\n",
        "        \" + \", paste0(confounders_nm, collapse = \" + \")\n",
        "      ))\n",
        "      m_formula <- as.formula(paste0(\n",
        "        mediator_nm, \" ~ \", Expo_id,\n",
        "        \" + \", paste0(confounders_nm, collapse = \" + \")\n",
        "      ))\n",
        "      \n",
        "      # Evaluate the formulas in the correct environment\n",
        "      y_model <- eval(bquote(glm(.(y_formula), family = gaussian, data = data)))\n",
        "      m_model <- eval(bquote(glm(.(m_formula), family = gaussian, data = data)))\n",
        "      \n",
        "      # the CMA mediation effect testing\n",
        "      suppressWarnings(cma_test <- CMAverse::cmest(\n",
        "        data = data, model = \"rb\",\n",
        "        full = T, EMint = F,\n",
        "        yreg = y_model,\n",
        "        mreg = list(m_model),\n",
        "        mval = list(0), basec = c(confounders_nm),\n",
        "        outcome = outcome_nm, exposure = Expo_id, mediator = mediator_nm,\n",
        "        inference = \"bootstrap\", nboot = nboot, boot.ci.type = \"per\"\n",
        "      ))\n",
        "    }\n",
        "    \n",
        "    # tidy a summary table\n",
        "    summary_table <- cbind(\n",
        "      cma_test$effect.pe,\n",
        "      cma_test$effect.se,\n",
        "      cma_test$effect.ci.low,\n",
        "      cma_test$effect.ci.high,\n",
        "      cma_test$effect.pval\n",
        "    )\n",
        "    \n",
        "    colnames(summary_table) <- c(\"Estimate\", \"SE\", \"CI_Low\", \"CI_Upper\", \"Pval\")\n",
        "    \n",
        "    print(paste(\"     \", Expo_id, \"Bootstrap done\"))\n",
        "    \n",
        "    list(`CMA Test` = cma_test, `CMA Summary Table` = summary_table)\n",
        "  }\n",
        "  \n",
        "  # run the mediation tests over all the exposures\n",
        "  medTest_res <- purrr::map(Expo_names, ~ run_cmest(\n",
        "    .x, data, nboot,\n",
        "    confounders_nm,\n",
        "    mediator_nm, outcome_nm\n",
        "  ))\n",
        "  names(medTest_res) <- Expo_names\n",
        "  return(medTest_res)\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "### Run IndExpo_medTest_NV()\n",
        "\n",
        "```{webr-r}\n",
        "result <- IndExpo_medTest_NV(\n",
        "  data = df_sim,\n",
        "  nboot = 1000,\n",
        "  exposures_nm = expo_nm,\n",
        "  mediator_nm = mediator_nm,\n",
        "  outcome_nm = outcome_nm,\n",
        "  confounders_nm = confounders_nm\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "## Individual exposure testing (with co-exposure)\n",
        "\n",
        "### Define IndExpo_medTest()\n",
        "\n",
        "```{webr-r}\n",
        "IndExpo_medTest <- function(data, nboot = 1000,\n",
        "                            exposures_nm, confounders_nm,\n",
        "                            mediator_nm, outcome_nm){\n",
        "  \n",
        "  suppressMessages(invisible(lapply(c(\"CMAverse\", \"purrr\", \"rlang\"), require, character.only = T)))\n",
        "  \n",
        "  # extract the list of exposures\n",
        "  Expo_names <- exposures_nm\n",
        "  \n",
        "  if(length(Expo_names) == 0){\n",
        "    stop('There are no columns with names in Expo_names')\n",
        "  }\n",
        "  \n",
        "  # a list to store the results\n",
        "  medTest_res <- list()\n",
        "  \n",
        "  # a function for purrr::map()\n",
        "  run_cmest <- function(Expo_id, data, nboot,\n",
        "                        confounders_nm = confounders_nm,\n",
        "                        mediator_nm = mediator_nm,\n",
        "                        outcome_nm = outcome_nm) {\n",
        "    \n",
        "    if(length(confounders_nm) == 0){\n",
        "      y_formula <- as.formula(paste0(outcome_nm, \" ~ \", Expo_id, \" + \",\n",
        "                                     mediator_nm, \" + \",\n",
        "                                     paste0(Expo_names[Expo_names != Expo_id], collapse = \" + \")))\n",
        "      \n",
        "      m_formula <- as.formula(paste0(mediator_nm, \" ~ \", Expo_id, \" + \", \n",
        "                                     paste0(Expo_names[Expo_names != Expo_id], collapse = \" + \")))\n",
        "      \n",
        "      # Evaluate the formulas in the correct environment\n",
        "      y_model <- eval(bquote(glm(.(y_formula), family = gaussian, data = data)))\n",
        "      m_model <- eval(bquote(glm(.(m_formula), family = gaussian, data = data)))\n",
        "      \n",
        "      # the CMA mediation effect testing\n",
        "      suppressWarnings(cma_test <- CMAverse::cmest(data = data, model = \"rb\",\n",
        "                                                   full = T, EMint = F,\n",
        "                                                   yreg = y_model, \n",
        "                                                   mreg = list(m_model),\n",
        "                                                   mval = list(0),\n",
        "                                                   basec = c(Expo_names[Expo_names != Expo_id]),\n",
        "                                                   outcome = outcome_nm,\n",
        "                                                   exposure = Expo_id,\n",
        "                                                   mediator = mediator_nm,\n",
        "                                                   inference = \"bootstrap\", nboot = nboot,\n",
        "                                                   boot.ci.type = \"per\"))\n",
        "    } else {\n",
        "      y_formula <- as.formula(paste0(outcome_nm, \" ~ \", Expo_id, \" + \", mediator_nm, \" + \",\n",
        "                                     paste0(Expo_names[Expo_names != Expo_id], collapse = \" + \"),\n",
        "                                     \" + \", paste0(confounders_nm, collapse = \" + \")))\n",
        "      \n",
        "      m_formula <- as.formula(paste0(mediator_nm, \" ~ \", Expo_id, \" + \",\n",
        "                                     paste0(Expo_names[Expo_names != Expo_id], collapse = \" + \"),\n",
        "                                     \" + \", paste0(confounders_nm, collapse = \" + \")))\n",
        "      \n",
        "      # Evaluate the formulas in the correct environment\n",
        "      y_model <- eval(bquote(glm(.(y_formula), family = gaussian, data = data)))\n",
        "      m_model <- eval(bquote(glm(.(m_formula), family = gaussian, data = data)))\n",
        "      \n",
        "      # the CMA mediation effect testing\n",
        "      suppressWarnings(cma_test <- CMAverse::cmest(data = data, model = \"rb\",\n",
        "                                                   full = T, EMint = F,\n",
        "                                                   yreg = y_model, \n",
        "                                                   mreg = list(m_model),\n",
        "                                                   mval = list(0),\n",
        "                                                   basec = c(Expo_names[Expo_names != Expo_id], confounders_nm),\n",
        "                                                   outcome = outcome_nm,\n",
        "                                                   exposure = Expo_id, \n",
        "                                                   mediator = mediator_nm,\n",
        "                                                   inference = \"bootstrap\",\n",
        "                                                   nboot = nboot, boot.ci.type = \"per\"))\n",
        "    }\n",
        "    \n",
        "    # tidy a summary table\n",
        "    summary_table <- cbind(cma_test$effect.pe,\n",
        "                           cma_test$effect.se,\n",
        "                           cma_test$effect.ci.low,\n",
        "                           cma_test$effect.ci.high,\n",
        "                           cma_test$effect.pval)\n",
        "    \n",
        "    colnames(summary_table) <- c(\"Estimate\", \"SE\", \"CI_Low\", \"CI_Upper\", \"Pval\")\n",
        "    \n",
        "    print(paste(\"     \", Expo_id, \"Bootstrap done\"))\n",
        "    \n",
        "    list(`CMA Test` = cma_test, `CMA Summary Table` = summary_table)\n",
        "  }\n",
        "  \n",
        "  # run the mediation tests over all the exposures\n",
        "  medTest_res <- purrr::map(Expo_names, ~run_cmest(.x, data, nboot,\n",
        "                                                   confounders_nm,\n",
        "                                                   mediator_nm, outcome_nm))\n",
        "  names(medTest_res) <- Expo_names\n",
        "  return(medTest_res)\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "### Run IndExpo_medTest()\n",
        "\n",
        "\n",
        "```{webr}\n",
        "set.seed(1211)\n",
        "expo_nm <- df_sim %>% select(starts_with(\"x\")) %>% colnames()\n",
        "confounders_nm <- df_sim %>% select(starts_with(\"c\")) %>% colnames()\n",
        "mediator_nm <- df_sim %>% select(starts_with(\"m\")) %>% colnames()\n",
        "outcome_nm <- \"y\"\t\n",
        "\n",
        "result <- IndExpo_medTest(data = df_sim,\n",
        "                          nboot = 1000,\n",
        "                          exposures_nm = expo_nm,\n",
        "                          mediator_nm = mediator_nm,\n",
        "                          outcome_nm = outcome_nm,\n",
        "                          confounders_nm = confounders_nm)\n",
        "```"
      ],
      "id": "3ceec406"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/HB636/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}